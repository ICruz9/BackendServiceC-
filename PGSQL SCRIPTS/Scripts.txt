

--CREATE DATABASE BackendServices;
--DROP TABLE task;
--DROP TABLE people;

--:::::::::::TABLAS:::::::::::::::::

CREATE TABLE people(
	idPeople INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	namePeople VARCHAR(40)
);
CREATE TABLE task(
	idTask INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	description VARCHAR(150),
	idPeopleFK INT,
	stateTask VARCHAR(10) CONSTRAINT validateState CHECK (stateTask='Pendiente'OR stateTask='En Proceso'OR stateTask='Finalizada'),
	priority VARCHAR(5) CONSTRAINT validatePriority CHECK (priority='Alta'OR priority='Media'OR priority='Baja'),
	fecha_inicio DATE NOT NULL,
	fecha_final DATE NOT NULL,
	notes VARCHAR(400),
	CONSTRAINT fk_idpeople FOREIGN KEY (idPeopleFK) REFERENCES people(idPeople)
);

--:::::::::INSERCIONES:::::::::::::::::::
INSERT INTO people(namePeople) VALUES ('Ignacio Cruz'),('Carlos Alvarado'),('Angel Gamboa');



--::::::::::::::::::::FUNCIONES::::::::::::::
--Funcion encargada de insertar un tarea
CREATE OR REPLACE FUNCTION sp_insertTask
(
    IN v_description VARCHAR(150),
    IN v_idPeople INT,
    IN v_stateTask VARCHAR(10),
    IN v_priority VARCHAR(5),
    IN v_fecha_inicio DATE,
    IN v_fecha_final DATE,
    IN v_notes VARCHAR(400)
) RETURNS BOOLEAN AS
$BODY$
BEGIN
    INSERT INTO task(description,idPeopleFK,stateTask,priority,fecha_inicio,fecha_final,notes)
    VALUES (v_description, v_idPeople, v_stateTask, v_priority, v_fecha_inicio, v_fecha_final, v_notes);
	RETURN TRUE;
	EXCEPTION WHEN OTHERS THEN
		RETURN FALSE;	
END;
$BODY$
LANGUAGE plpgsql;
--SELECT public.sp_insertTask('as3',1,'Pendiente','Media','2020-02-01','2020-02-02','')
--SELECT public.sp_insertTask('as4',1,'Pendiente','Media','2020-02-01','2020-02-02','')

--funcion encargada de eliminar una tarea
CREATE OR REPLACE FUNCTION sp_deleteTask
(
    IN v_idTask INT
)
RETURNS BOOLEAN AS
$BODY$
BEGIN
	DELETE FROM task WHERE idTask = v_idTask;
	RETURN TRUE;
	EXCEPTION WHEN OTHERS THEN
	RETURN FALSE;
END;
$BODY$
LANGUAGE plpgsql;
--SELECT public.sp_deleteTask(5)

--Funcion encargada de actualizar o editar una tarea
CREATE OR REPLACE FUNCTION sp_updateTask
(
	IN v_idTask INT,
    IN v_description VARCHAR(150),
    IN v_idPeople INT,
    IN v_stateTask VARCHAR(10),
    IN v_priority VARCHAR(5),
    IN v_fecha_inicio DATE,
    IN v_fecha_final DATE,
    IN v_notes VARCHAR(400)
) RETURNS BOOLEAN AS
$BODY$
BEGIN
    UPDATE task SET description = v_description, idPeopleFK = v_idPeople, stateTask = v_stateTask, priority = v_priority,
	fecha_inicio = v_fecha_inicio,fecha_final = v_fecha_final,notes = v_notes WHERE idTask = v_idTask;
	RETURN TRUE;
	EXCEPTION WHEN OTHERS THEN
	RETURN FALSE;

END;
$BODY$
LANGUAGE plpgsql;
--SELECT public.sp_updateTask(4,'as1',1,'Pendiente','Media','2020-02-01','2020-02-02','')


--Funcion que obtiene todas las tareas
CREATE OR REPLACE FUNCTION sp_getTasks
(
	OUT v_idTask INT,
    OUT v_description VARCHAR(150),
    OUT v_idPeople VARCHAR(40),
    OUT v_stateTask VARCHAR(10),
    OUT v_priority VARCHAR(5),
    OUT v_fecha_inicio DATE,
    OUT v_fecha_final DATE,
    OUT v_notes VARCHAR(400)
)
  RETURNS SETOF record AS
$BODY$

BEGIN

	RETURN query SELECT idtask,description,tp.namePeople,statetask,priority,fecha_inicio,fecha_final,notes FROM task INNER JOIN
	people AS tp ON tp.idPeople=idpeopleFK;
END;
$BODY$
LANGUAGE plpgsql;
--SELECT * from public.sp_getTasks()



--Funcion que obtiene un tarea especifica
CREATE OR REPLACE FUNCTION sp_getTasksByFilter
(
	IN vi_idPeople INT,
    IN vi_stateTask VARCHAR(10),
    IN vi_priority VARCHAR(5),
    IN vi_fecha_inicio DATE,
    IN vi_fecha_final DATE,
	OUT v_idTask INT,
    OUT v_description VARCHAR(150),
    OUT v_idPeople INT,
    OUT v_stateTask VARCHAR(10),
    OUT v_priority VARCHAR(5),
    OUT v_fecha_inicio DATE,
    OUT v_fecha_final DATE,
    OUT v_notes VARCHAR(400)
)
  RETURNS SETOF record AS
$BODY$
DECLARE
BEGIN
	IF (vi_idpeople=0)
	THEN
		IF (vi_fecha_inicio='1000-01-01' OR vi_fecha_final='1000-01-01')
		THEN
			IF (vi_stateTask='0')
			THEN
				IF (vi_priority='0')
				THEN
					RETURN query SELECT idtask,description,idpeoplefk,statetask,priority,fecha_inicio,fecha_final,notes FROM task ;
				ELSE
					RETURN query SELECT idtask,description,idpeoplefk,statetask,priority,fecha_inicio,fecha_final,notes FROM task 
					WHERE  priority = vi_priority;
				END IF;
			ELSE
				RETURN query SELECT idtask,description,idpeoplefk,statetask,priority,fecha_inicio,fecha_final,notes FROM task 
				WHERE  priority = vi_priority AND statetask = vi_stateTask;
			END IF;	
		ELSE
			IF (vi_stateTask='0')
			THEN
				IF (vi_priority='0')
				THEN
					RETURN query SELECT idtask,description,idpeoplefk,statetask,priority,fecha_inicio,fecha_final,notes FROM task 
					WHERE fecha_inicio>=vi_fecha_inicio AND fecha_final<= vi_fecha_final ;
				ELSE
					RETURN query SELECT idtask,description,idpeoplefk,statetask,priority,fecha_inicio,fecha_final,notes FROM task 
					WHERE  priority = vi_priority AND fecha_inicio>=vi_fecha_inicio AND fecha_final<= vi_fecha_final;
				END IF;
			ELSE
				RETURN query SELECT idtask,description,idpeoplefk,statetask,priority,fecha_inicio,fecha_final,notes FROM task 
				WHERE  priority = vi_priority AND statetask = vi_stateTask AND fecha_inicio>=vi_fecha_inicio AND fecha_final<= vi_fecha_final;
			END IF;
		END IF;	
		
	ELSE
		IF (vi_fecha_inicio='1000-01-01' OR vi_fecha_final='1000-01-01')
		THEN
			IF (vi_stateTask='0')
			THEN
				IF (vi_priority='0')
				THEN
					RETURN query SELECT idtask,description,idpeoplefk,statetask,priority,fecha_inicio,fecha_final,notes FROM task 
					WHERE idpeoplefk=vi_idPeople;
				ELSE
					RETURN query SELECT idtask,description,idpeoplefk,statetask,priority,fecha_inicio,fecha_final,notes FROM task 
					WHERE idpeoplefk=vi_idPeople AND priority = vi_priority;
				END IF;
			ELSE
				RETURN query SELECT idtask,description,idpeoplefk,statetask,priority,fecha_inicio,fecha_final,notes FROM task 
				WHERE idpeoplefk=vi_idPeople AND priority = vi_priority AND statetask = vi_stateTask;
			END IF;	
		ELSE
			IF (vi_stateTask='0')
			THEN
				IF (vi_priority='0')
				THEN
					RETURN query SELECT idtask,description,idpeoplefk,statetask,priority,fecha_inicio,fecha_final,notes FROM task 
					WHERE idpeoplefk=vi_idPeople AND fecha_inicio>=vi_fecha_inicio AND fecha_final<= vi_fecha_final;
				ELSE
					RETURN query SELECT idtask,description,idpeoplefk,statetask,priority,fecha_inicio,fecha_final,notes FROM task 
					WHERE idpeoplefk=vi_idPeople AND priority = vi_priority AND fecha_inicio>=vi_fecha_inicio AND fecha_final<= vi_fecha_final;
				END IF;
			ELSE
				RETURN query SELECT idtask,description,idpeoplefk,statetask,priority,fecha_inicio,fecha_final,notes FROM task 
				WHERE idpeoplefk=vi_idPeople AND priority = vi_priority AND statetask = vi_stateTask AND fecha_inicio>=vi_fecha_inicio AND fecha_final<= vi_fecha_final;
			END IF;
		END IF;	
	END IF;
	
END;
$BODY$
LANGUAGE plpgsql;



--Funcion que obtiene todas las personas
CREATE OR REPLACE FUNCTION sp_getPeople
(
	OUT v_idpeople INT,
    OUT v_namepeople VARCHAR(30)
)
  RETURNS SETOF record AS
$BODY$

BEGIN
	RETURN query SELECT idpeople,namepeople FROM people; 
END;
$BODY$
LANGUAGE plpgsql;
--SELECT * from public.sp_getPeople()


